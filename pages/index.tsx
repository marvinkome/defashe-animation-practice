import { createRef, useEffect, useMemo, useRef, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/future/image";
import { motion, useScroll } from "framer-motion";

const AnimatedText = () => {};

const ALL_IMAGES = [
  {
    src: "/images/1.jpg",
    alt: "Guy with brown coat",
  },
  {
    src: "/images/2.jpg",
    alt: "Girl with brown beanie",
  },
  {
    src: "/images/3.jpg",
    alt: "Girl with denim shirt",
  },
  {
    src: "/images/4.jpg",
    alt: "Girl with glasses",
  },
];

const ImageList = () => {
  const [images, setImages] = useState(ALL_IMAGES);
  const imageScrollRef = useRef<HTMLDivElement>(null);
  const imageRefs = useRef<any[]>([]);

  const topElRef = useRef<HTMLDivElement>(null);
  const bottomElRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const refs = imageRefs.current;
    refs[1].scrollIntoView({ block: "center" });
  }, []);

  useEffect(() => {
    imageScrollRef.current?.addEventListener("scroll", (event) => {
      console.log("top", imageScrollRef.current?.scrollTop);
    });

    return () => {
      window.removeEventListener("scroll", () => {
        //
      });
    };
  }, []);

  const addItemToTop = () => {
    setImages((prevImages) => {
      const images = [...prevImages];
      const lastTwo = images.splice(-1);

      return [...lastTwo, ...images];
    });

    if (imageScrollRef.current) {
      imageScrollRef.current.scrollTop += 540;
    }
  };

  const addItemToBottom = () => {
    setImages((prevImages) => {
      const images = [...prevImages];
      const firstTwo = images.splice(0, 1);

      return [...images, ...firstTwo];
    });
  };

  // infinite scroll observer
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) return;
          const scrollPosition = { topListener: "start", bottomListener: "end" }[entry.target.id];

          if (scrollPosition === "start") {
            addItemToTop();
          }

          if (scrollPosition === "end") {
            console.log("add item to bottom");
          }
        });
      },
      { root: imageScrollRef.current, rootMargin: "80px", threshold: 0 }
    );

    const topEl = topElRef.current;
    const bottomEl = bottomElRef.current;
    if (topEl) {
      observer.observe(topEl);
    }

    if (bottomEl) {
      observer.observe(bottomEl);
    }

    return () => {
      if (topEl) {
        observer.unobserve(topEl);
      }

      if (bottomEl) {
        observer.unobserve(bottomEl);
      }
    };
  }, [images]);

  return (
    <div ref={imageScrollRef} className="fixed h-full overflow-auto top-0 right-28 z-10">
      <button onClick={() => addItemToTop()} className="fixed top-0 left-0 bg-white p-6">
        Add image
      </button>

      <div className="flex flex-col space-y-20">
        <div id="topListener" ref={topElRef} />

        {images.map((image, idx) => (
          <div key={image.src} id={`${idx}`} ref={(el: any) => (imageRefs.current[idx] = el)}>
            <Image width={360} height={620} src={image.src} className="object-cover rounded-[80px]" alt={image.alt} />
          </div>
        ))}

        <div className="w-10 h-5 bg-red-50" id="bottomListener" ref={bottomElRef} />
      </div>
    </div>
  );
};

const Home: NextPage = () => {
  const [images, setImages] = useState(ALL_IMAGES);
  const imageScrollRef = useRef<HTMLDivElement>(null);
  const imageRefs = useRef<any[]>([]);

  const intersectionObserverOptions = useMemo(
    () => ({
      root: imageScrollRef.current,
      rootMargin: "0px",
      threshold: 1.0,
    }),
    []
  );

  return (
    <div className="container mx-auto py-8">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* initial opacity overlay */}
      <motion.div
        className="bg-[#6f543f] h-screen w-screen top-0 left-0 fixed pointer-events-none z-20"
        initial={{ opacity: 1 }}
        animate={{ opacity: 0 }}
        transition={{ duration: 1.8, ease: "easeOut" }}
      />

      {/* background circle */}
      <motion.div
        className="fixed bottom-[-20%] right-[-10%] w-[60vw] h-[60vw] border-4 border-[#f9e4d2] rounded-full pointer-events-none z-0"
        initial={{ y: 120, opacity: 0.1 }}
        animate={{ y: 0, opacity: 0.4, transition: { duration: 1.4 } }}
      ></motion.div>

      {/* header */}
      <motion.header
        className="flex flex-row items-center text-[#f9e4d2]"
        initial={{ x: 100, opacity: 0 }}
        animate={{ x: 0, opacity: 1 }}
        transition={{ duration: 1.2, ease: "easeOut" }}
      >
        <h1 className="uppercase font-medium text-4xl">Defashe</h1>
        <div className="flex flex-row ml-40">
          <p className="text-xl">
            <a className="hover:text-[#fcf1e9]" href="#">
              Trends
            </a>
          </p>

          <p className="ml-8 text-xl">
            <a className="hover:text-[#fcf1e9]" href="#">
              Collections
            </a>
          </p>

          <p className="ml-8 text-xl">
            <a className="hover:text-[#fcf1e9]" href="#">
              Explore
            </a>
          </p>
        </div>
      </motion.header>

      {/* body */}
      <main className="min-h-[80vh] flex flex-col justify-center px-20 pr-60">
        <div>
          <motion.h2
            className="text-9xl mb-6 tracking-wider text-[#ebe0cc] overflow-hidden"
            initial={{ width: 0, opacity: 0 }}
            animate={{ width: "auto", opacity: 1, transition: { duration: 2.5 } }}
          >
            Incredible Collection
          </motion.h2>
          <div />
        </div>

        <motion.div
          className="flex items-center w-fit ml-20 "
          initial={{ x: -40, opacity: 0 }}
          animate={{
            x: 0,
            opacity: 1,
            transition: {
              duration: 1.2,
              ease: "easeOut",
            },
          }}
          whileHover={{
            x: 20,
            transition: {
              duration: 0.8,
            },
          }}
        >
          <a className="text-3xl text-[#e3d0bf]" href="#">
            Shop Now
          </a>

          <span className="w-20 h-[2px] block bg-[#e3d0bf] ml-4" />
        </motion.div>
      </main>

      {/* images */}
      <ImageList />

      {/* copyright */}
      <motion.div
        className="w-fit"
        initial={{ x: 100, opacity: 0 }}
        animate={{ x: -25, opacity: 1 }}
        transition={{ duration: 1.2, ease: "easeOut" }}
      >
        <span className="text-xl mt-[30px] inline-block text-[#f9e4d2] rotate-[-90deg]">@2022</span>
      </motion.div>
    </div>
  );
};

export default Home;
